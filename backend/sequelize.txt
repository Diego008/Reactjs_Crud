--ADD COLUMN
npx sequelize-cli migration:create --name modify_users_add_new_fields

iniciando projeto

Executar comando dentro da pasta criada -> yarn init -y
npm init -y

Abrir no VSCODE -> code .

yarn add express

Installing Sequelize ORM -> npm install --save sequelize
Installing MYSQL Dependency -> npm install --save mysql2

Documentação Sequelize: https://sequelize.org/master/index.html

Instalando sequelize-cli

yarn add sequelize-cli -D

Iniciando projeto sequelize -> npx sequelize init

ALterar nome do arquivo config para config.js

Ex de conexão:

module.exports = {
  username: 'root',
  password: 'root',
  database: 'delivery_acai',
  host: 'localhost',
  dialect: 'mysql',
  define: {
    timestamps: true
  }
}

Comando para criar base de dados -> yarn sequelize db:create
npx sequelize db:create

Criar migration -> npx sequelize migration:create --name=create-users

criar tabela -> npx sequelize-cli db:migrate
desfazer ultima migrate -> npx sequelize-cli db:migrate:undo

Verificar opções sequelize -> npx sequelize help

desfazer todas migrations -> npx sequelize-cli db:migrate:undo:all

Adicionando chave estrangeira em migration

module.exports = {
    up: (queryInterface, Sequelize) => {
        return queryInterface.sequelize.transaction((t) => {
            return Promise.all([
                queryInterface.addColumn('User', 'name_foreign_key', {
                    type: Sequelize.STRING
                }, { transaction: t }),
                queryInterface.addColumn('Person', 'favoriteColor', {
                    type: Sequelize.STRING,
                }, { transaction: t })
            ])
        })
    },

    down: (queryInterface, Sequelize) => {
        return queryInterface.sequelize.transaction((t) => {
            return Promise.all([
                queryInterface.removeColumn('Person', 'petName', { transaction: t }),
                queryInterface.removeColumn('Person', 'favoriteColor', { transaction: t })
            ])
        })
    }
};

Adicionando nova coluna

npx sequelize-cli migration:create --name=add-idade-field-to-users

up(queryInterface, Sequelize) => {
	return queryInterface.addColumn(
          'User',
          'idade',
        {
          type: Sequelize.STRING,
        },
        { transaction }
      );
}

down: (queryInterface, Sequelize) => {
	return queryInterface.removeColumn(
          'User',
          'idade',
        {
          type: Sequelize.STRING,
        },
        { transaction }
      );
}

Utilizar consign ou require-directory npm para incluir model, controller com códigos padrões

Criando migrate com chave estrangeira -> relacionamento 1:n

user_id: {
        type: DataTypes.INTEGER,
        allowNull: false,
        references: {model: 'users', key: 'id'},
        onUpdate: 'CASCADE',
        onDelete: 'RESTRICT'
      },

numa eventual tabela de endereços para usuários por exemplo, utilizar o encadeamento dentro das rotas para dizer que não é possível cadastrar um endereço sem usuário.

No Model deve-se detalhar também o relacionamento por outro método.

belongsTo -> Pertence a um
belongsTomany -> Pertence a muitos
hasMany -> tem muitos
hasOne -> tem um

Criar a associação no index.js do Database junto com a inicialização do Model

Ex.: const Sequelize = require('sequelize');

const dbConfig = require('../config/config');

const User = require('../models/User');
const Endereco = require('../models/Endereco');
const Tech = require('../models/Tech');

const connection = new Sequelize(dbConfig);

User.init(connection);
Endereco.init(connection);
Tech.init(connection);

Endereco.associate(connection.models);
User.associate(connection.models);
Tech.associate(connection.models);

module.exports = connection;